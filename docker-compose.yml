version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    mem_limit: 512m

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    mem_limit: 1g

  spark-master:
    image: bitnami/spark:3.4
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8080:8080"
      - "7077:7077"
    healthcheck:
      test: ["CMD-SHELL", "netstat -tuln | grep 7077"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-worker:
    image: bitnami/spark:3.4
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_WEBUI_PORT=8081
    ports:
      - "8081:8081"
    depends_on:
      spark-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "netstat -tuln | grep 8081"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./archi_docker/requirement.spark.txt:/tmp/requirements.txt
    command: >
      bash -c "
        export PATH=$PATH:/.local/bin &&
        pip install --no-warn-script-location -r /tmp/requirements.txt &&
        /opt/bitnami/scripts/spark/run.sh
      "

  trans_load:
    build:
      context: .
      dockerfile: archi_docker/Dockerfile.spark
    env_file: .env
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - PYSPARK_PYTHON=/opt/bitnami/python/bin/python
      - PYSPARK_DRIVER_PYTHON=/opt/bitnami/python/bin/python
    depends_on:
      spark-master:
        condition: service_healthy
      spark-worker:
        condition: service_healthy
    volumes:
      - ./app:/app
    mem_limit: 2g
    cpus: '1'

  producer:
    build:
      context: .
      dockerfile: archi_docker/dockerfile.producer
    env_file: .env
    depends_on:
      - kafka
    mem_limit: 512m
    restart: on-failure

  api:
    build:
      context: .
      dockerfile: archi_docker/Dockerfile.api
    environment:
      - TOKENIZERS_PARALLELISM=false
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    mem_limit: 2g
    restart: unless-stopped

networks:
  default:
    name: spark_network
